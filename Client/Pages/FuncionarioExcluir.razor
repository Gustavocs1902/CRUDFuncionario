@page "/excluirfuncionario"
@using Shared.Models
@inject HttpClient httpClient

<h3>Excluir Funcionario</h3>

<div class="shadow p-3">
    <label>
        Id do Funcionario:
        <InputNumber class="form-control" @bind-Value="funcionarioId"></InputNumber>
    </label>

    <div class="mt-2">
        <button class="btn btn-primary" @onclick="Consultar">Consultar</button>
    </div>
    <hr />
    <EditForm Model="funcionario" OnSubmit="Excluir" class="d-flex flex-column">
        <label class="mt-2">
            Nome:
            <InputText class="form-control" @bind-Value="funcionario.Nome" disable="true"></InputText>
        </label>
        <label class="mt-2">
            Telefone:
            <InputText class="form-control" @bind-Value="funcionario.Telefone" disable="true"></InputText>
        </label>
        <label class="mt-2">
            Rg:
            <InputText class="form-control" @bind-Value="funcionario.RG" disable="true"></InputText>
        </label>
        <label class="mt-2">
            Endereço:
            <InputText class="form-control" @bind-Value="funcionario.Endereco" disable="true"></InputText>
        </label>
        <label class="mt-2">
            Salário:
            <InputNumber class="form-control" @bind-Value="funcionario.Salario" disable="true"></InputNumber>
        </label>
        <label class="mt-2">
            Horas Extras:
            <InputNumber class="form-control" @bind-Value="funcionario.HorasExtras" disable="true"></InputNumber>
        </label>

        <div class="mt-2">
            <button class="btn btn-primary" type="submit">Excluir</button>
        </div>

    </EditForm>

</div>


@code {
    int funcionarioId;
    string msg = "";
    FuncionariosDb funcionario = new();

    protected async Task Consultar()
    {
        msg = "";
        string api = $"api/Funcionarios/consultar/{funcionarioId}";

        HttpResponseMessage response = await httpClient.GetAsync(api);

        if (!response.IsSuccessStatusCode)
        {
            msg = await response.Content.ReadAsStringAsync();
            funcionario = new();
        }
        else
        {
            funcionario = await response.Content.ReadFromJsonAsync<FuncionariosDb>();
        }
    }
    protected async Task Excluir()
    {
        if(funcionario is null)
        {
            msg = "Funcionario está nulo";
        }
        string api = $"api/Funcionarios/excluir/{funcionarioId}";
        HttpResponseMessage response = await httpClient.DeleteAsync(api);

        if (!response.IsSuccessStatusCode)
        {
            msg = await response.Content.ReadAsStringAsync();
            if (string.IsNullOrEmpty(msg))
            {
                msg = $"Não foi possivel acessar a API{api}";
            }
        }
        else
        {
            msg = "Funcionario excluido com sucesso";
            funcionario = new();
        }
    }
}
